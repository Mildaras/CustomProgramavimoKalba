//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\milda\OneDrive\Stalinis kompiuteris\pktProjektas\projektas2023\Frukt\Frukt.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Frukt {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class FruktParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, WHILE=22, NUMBER=23, FLOAT=24, 
		TEXT=25, BOOL=26, WHITESPACE=27, IDENTIFIER=28;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_block = 3, RULE_assignment = 4, 
		RULE_constant = 5, RULE_ifBlock = 6, RULE_elseifBlock = 7, RULE_elseBlock = 8, 
		RULE_whileBlock = 9, RULE_functionStatement = 10, RULE_functionCall = 11, 
		RULE_arrayAccess = 12, RULE_arrayDeclaration = 13, RULE_expressionList = 14, 
		RULE_expression = 15, RULE_multdivOp = 16, RULE_addsubOp = 17, RULE_compareOp = 18;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "block", "assignment", "constant", "ifBlock", 
		"elseifBlock", "elseBlock", "whileBlock", "functionStatement", "functionCall", 
		"arrayAccess", "arrayDeclaration", "expressionList", "expression", "multdivOp", 
		"addsubOp", "compareOp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'{'", "'}'", "'='", "'if'", "'else'", "'('", "','", "')'", 
		"'['", "']'", "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", "'<'", "'>'", 
		"'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "WHILE", "NUMBER", 
		"FLOAT", "TEXT", "BOOL", "WHITESPACE", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Frukt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public FruktParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(FruktParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << WHILE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 38; line();
				}
				}
				State = 43;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 44; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public FunctionStatementContext functionStatement() {
			return GetRuleContext<FunctionStatementContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 50;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; functionStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 48; ifBlock();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 49; whileBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 52; assignment();
				}
				break;

			case 2:
				{
				State = 53; functionCall();
				}
				break;

			case 3:
				{
				State = 54; arrayDeclaration();
				}
				break;
			}
			State = 57; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(T__1);
			State = 63;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << WHILE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 60; line();
				}
				}
				State = 65;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 66; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FruktParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(IDENTIFIER);
			State = 69; Match(T__3);
			State = 70; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(FruktParser.NUMBER, 0); }
		public ITerminalNode FLOAT() { return GetToken(FruktParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(FruktParser.BOOL, 0); }
		public ITerminalNode TEXT() { return GetToken(FruktParser.TEXT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << FLOAT) | (1L << TEXT) | (1L << BOOL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifBlockContext elseifBlock() {
			return GetRuleContext<ElseifBlockContext>(0);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_ifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(T__4);
			State = 75; expression(0);
			State = 76; block();
			State = 79;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 77; elseifBlock();
				}
				break;

			case 2:
				{
				State = 78; elseBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifBlockContext elseifBlock() {
			return GetRuleContext<ElseifBlockContext>(0);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public ElseifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterElseifBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitElseifBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifBlockContext elseifBlock() {
		ElseifBlockContext _localctx = new ElseifBlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_elseifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(T__5);
			State = 82; expression(0);
			State = 83; block();
			State = 86;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 84; elseifBlock();
				}
				break;

			case 2:
				{
				State = 85; elseBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(T__5);
			State = 89; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(FruktParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(WHILE);
			State = 92; expression(0);
			State = 93; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FruktParser.IDENTIFIER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterFunctionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitFunctionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_functionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(IDENTIFIER);
			State = 96; Match(T__6);
			State = 105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << NUMBER) | (1L << FLOAT) | (1L << TEXT) | (1L << BOOL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 97; expression(0);
				State = 102;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__7) {
					{
					{
					State = 98; Match(T__7);
					State = 99; expression(0);
					}
					}
					State = 104;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 107; Match(T__8);
			State = 108; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FruktParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(IDENTIFIER);
			State = 111; Match(T__6);
			State = 120;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << NUMBER) | (1L << FLOAT) | (1L << TEXT) | (1L << BOOL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 112; expression(0);
				State = 117;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__7) {
					{
					{
					State = 113; Match(T__7);
					State = 114; expression(0);
					}
					}
					State = 119;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 122; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FruktParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(IDENTIFIER);
			State = 125; Match(T__9);
			State = 126; expression(0);
			State = 127; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FruktParser.IDENTIFIER, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_arrayDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(IDENTIFIER);
			State = 130; Match(T__3);
			State = 131; Match(T__9);
			State = 132; expressionList();
			State = 133; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; expression(0);
			State = 140;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__7) {
				{
				{
				State = 136; Match(T__7);
				State = 137; expression(0);
				}
				}
				State = 142;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FruktParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesesExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesesExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterParenthesesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitParenthesesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultdivExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultdivOpContext multdivOp() {
			return GetRuleContext<MultdivOpContext>(0);
		}
		public MultdivExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterMultdivExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitMultdivExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultdivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddsubExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddsubOpContext addsubOp() {
			return GetRuleContext<AddsubOpContext>(0);
		}
		public AddsubExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterAddsubExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitAddsubExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddsubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultipleComparisonExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareOpContext[] compareOp() {
			return GetRuleContexts<CompareOpContext>();
		}
		public CompareOpContext compareOp(int i) {
			return GetRuleContext<CompareOpContext>(i);
		}
		public MultipleComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterMultipleComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitMultipleComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareOpContext compareOp() {
			return GetRuleContext<CompareOpContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 144; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 145; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 146; functionCall();
				}
				break;

			case 4:
				{
				_localctx = new ArrayAccessExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 147; arrayAccess();
				}
				break;

			case 5:
				{
				_localctx = new ParenthesesExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 148; Match(T__6);
				State = 149; expression(0);
				State = 150; Match(T__8);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 174;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 172;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
					case 1:
						{
						_localctx = new MultdivExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 154;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 155; multdivOp();
						State = 156; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new AddsubExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 158;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 159; addsubOp();
						State = 160; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new MultipleComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 162;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 163; compareOp();
						State = 164; expression(0);
						State = 165; compareOp();
						State = 166; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 168;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 169; compareOp();
						State = 170; expression(2);
						}
						break;
					}
					} 
				}
				State = 176;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultdivOpContext : ParserRuleContext {
		public MultdivOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multdivOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterMultdivOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitMultdivOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultdivOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultdivOpContext multdivOp() {
		MultdivOpContext _localctx = new MultdivOpContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_multdivOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_la = _input.La(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddsubOpContext : ParserRuleContext {
		public AddsubOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addsubOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterAddsubOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitAddsubOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddsubOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddsubOpContext addsubOp() {
		AddsubOpContext _localctx = new AddsubOpContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_addsubOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_la = _input.La(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOpContext : ParserRuleContext {
		public CompareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.EnterCompareOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFruktListener typedListener = listener as IFruktListener;
			if (typedListener != null) typedListener.ExitCompareOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFruktVisitor<TResult> typedVisitor = visitor as IFruktVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOpContext compareOp() {
		CompareOpContext _localctx = new CompareOpContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_compareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1E\xBA\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\a\x2"+
		"*\n\x2\f\x2\xE\x2-\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x35"+
		"\n\x3\x3\x4\x3\x4\x3\x4\x5\x4:\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\a\x5@\n\x5"+
		"\f\x5\xE\x5\x43\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x5\bR\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tY\n\t\x3"+
		"\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\a\fg\n\f\f\f"+
		"\xE\fj\v\f\x5\fl\n\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\a\rv\n\r"+
		"\f\r\xE\ry\v\r\x5\r{\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\a\x10\x8D\n\x10\f"+
		"\x10\xE\x10\x90\v\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x5\x11\x9B\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\a\x11\xAF\n\x11\f\x11\xE\x11\xB2\v\x11\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x2\x2\x3 \x15\x2\x2\x4\x2\x6\x2\b"+
		"\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2\x2\x6\x3\x2\x19\x1C\x3\x2\xE\xF\x3\x2\x10\x11\x3"+
		"\x2\x12\x17\xBE\x2+\x3\x2\x2\x2\x4\x34\x3\x2\x2\x2\x6\x39\x3\x2\x2\x2"+
		"\b=\x3\x2\x2\x2\n\x46\x3\x2\x2\x2\fJ\x3\x2\x2\x2\xEL\x3\x2\x2\x2\x10S"+
		"\x3\x2\x2\x2\x12Z\x3\x2\x2\x2\x14]\x3\x2\x2\x2\x16\x61\x3\x2\x2\x2\x18"+
		"p\x3\x2\x2\x2\x1A~\x3\x2\x2\x2\x1C\x83\x3\x2\x2\x2\x1E\x89\x3\x2\x2\x2"+
		" \x9A\x3\x2\x2\x2\"\xB3\x3\x2\x2\x2$\xB5\x3\x2\x2\x2&\xB7\x3\x2\x2\x2"+
		"(*\x5\x4\x3\x2)(\x3\x2\x2\x2*-\x3\x2\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2"+
		",.\x3\x2\x2\x2-+\x3\x2\x2\x2./\a\x2\x2\x3/\x3\x3\x2\x2\x2\x30\x35\x5\x16"+
		"\f\x2\x31\x35\x5\x6\x4\x2\x32\x35\x5\xE\b\x2\x33\x35\x5\x14\v\x2\x34\x30"+
		"\x3\x2\x2\x2\x34\x31\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x33\x3\x2\x2"+
		"\x2\x35\x5\x3\x2\x2\x2\x36:\x5\n\x6\x2\x37:\x5\x18\r\x2\x38:\x5\x1C\xF"+
		"\x2\x39\x36\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39\x38\x3\x2\x2\x2:;\x3\x2"+
		"\x2\x2;<\a\x3\x2\x2<\a\x3\x2\x2\x2=\x41\a\x4\x2\x2>@\x5\x4\x3\x2?>\x3"+
		"\x2\x2\x2@\x43\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x44"+
		"\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x44\x45\a\x5\x2\x2\x45\t\x3\x2\x2\x2"+
		"\x46G\a\x1E\x2\x2GH\a\x6\x2\x2HI\x5 \x11\x2I\v\x3\x2\x2\x2JK\t\x2\x2\x2"+
		"K\r\x3\x2\x2\x2LM\a\a\x2\x2MN\x5 \x11\x2NQ\x5\b\x5\x2OR\x5\x10\t\x2PR"+
		"\x5\x12\n\x2QO\x3\x2\x2\x2QP\x3\x2\x2\x2QR\x3\x2\x2\x2R\xF\x3\x2\x2\x2"+
		"ST\a\b\x2\x2TU\x5 \x11\x2UX\x5\b\x5\x2VY\x5\x10\t\x2WY\x5\x12\n\x2XV\x3"+
		"\x2\x2\x2XW\x3\x2\x2\x2XY\x3\x2\x2\x2Y\x11\x3\x2\x2\x2Z[\a\b\x2\x2[\\"+
		"\x5\b\x5\x2\\\x13\x3\x2\x2\x2]^\a\x18\x2\x2^_\x5 \x11\x2_`\x5\b\x5\x2"+
		"`\x15\x3\x2\x2\x2\x61\x62\a\x1E\x2\x2\x62k\a\t\x2\x2\x63h\x5 \x11\x2\x64"+
		"\x65\a\n\x2\x2\x65g\x5 \x11\x2\x66\x64\x3\x2\x2\x2gj\x3\x2\x2\x2h\x66"+
		"\x3\x2\x2\x2hi\x3\x2\x2\x2il\x3\x2\x2\x2jh\x3\x2\x2\x2k\x63\x3\x2\x2\x2"+
		"kl\x3\x2\x2\x2lm\x3\x2\x2\x2mn\a\v\x2\x2no\x5\b\x5\x2o\x17\x3\x2\x2\x2"+
		"pq\a\x1E\x2\x2qz\a\t\x2\x2rw\x5 \x11\x2st\a\n\x2\x2tv\x5 \x11\x2us\x3"+
		"\x2\x2\x2vy\x3\x2\x2\x2wu\x3\x2\x2\x2wx\x3\x2\x2\x2x{\x3\x2\x2\x2yw\x3"+
		"\x2\x2\x2zr\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x3\x2\x2\x2|}\a\v\x2\x2}\x19\x3"+
		"\x2\x2\x2~\x7F\a\x1E\x2\x2\x7F\x80\a\f\x2\x2\x80\x81\x5 \x11\x2\x81\x82"+
		"\a\r\x2\x2\x82\x1B\x3\x2\x2\x2\x83\x84\a\x1E\x2\x2\x84\x85\a\x6\x2\x2"+
		"\x85\x86\a\f\x2\x2\x86\x87\x5\x1E\x10\x2\x87\x88\a\r\x2\x2\x88\x1D\x3"+
		"\x2\x2\x2\x89\x8E\x5 \x11\x2\x8A\x8B\a\n\x2\x2\x8B\x8D\x5 \x11\x2\x8C"+
		"\x8A\x3\x2\x2\x2\x8D\x90\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2"+
		"\x2\x2\x8F\x1F\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x91\x92\b\x11\x1\x2\x92"+
		"\x9B\x5\f\a\x2\x93\x9B\a\x1E\x2\x2\x94\x9B\x5\x18\r\x2\x95\x9B\x5\x1A"+
		"\xE\x2\x96\x97\a\t\x2\x2\x97\x98\x5 \x11\x2\x98\x99\a\v\x2\x2\x99\x9B"+
		"\x3\x2\x2\x2\x9A\x91\x3\x2\x2\x2\x9A\x93\x3\x2\x2\x2\x9A\x94\x3\x2\x2"+
		"\x2\x9A\x95\x3\x2\x2\x2\x9A\x96\x3\x2\x2\x2\x9B\xB0\x3\x2\x2\x2\x9C\x9D"+
		"\f\x6\x2\x2\x9D\x9E\x5\"\x12\x2\x9E\x9F\x5 \x11\a\x9F\xAF\x3\x2\x2\x2"+
		"\xA0\xA1\f\x5\x2\x2\xA1\xA2\x5$\x13\x2\xA2\xA3\x5 \x11\x6\xA3\xAF\x3\x2"+
		"\x2\x2\xA4\xA5\f\x4\x2\x2\xA5\xA6\x5&\x14\x2\xA6\xA7\x5 \x11\x2\xA7\xA8"+
		"\x5&\x14\x2\xA8\xA9\x5 \x11\x5\xA9\xAF\x3\x2\x2\x2\xAA\xAB\f\x3\x2\x2"+
		"\xAB\xAC\x5&\x14\x2\xAC\xAD\x5 \x11\x4\xAD\xAF\x3\x2\x2\x2\xAE\x9C\x3"+
		"\x2\x2\x2\xAE\xA0\x3\x2\x2\x2\xAE\xA4\x3\x2\x2\x2\xAE\xAA\x3\x2\x2\x2"+
		"\xAF\xB2\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1!\x3\x2"+
		"\x2\x2\xB2\xB0\x3\x2\x2\x2\xB3\xB4\t\x3\x2\x2\xB4#\x3\x2\x2\x2\xB5\xB6"+
		"\t\x4\x2\x2\xB6%\x3\x2\x2\x2\xB7\xB8\t\x5\x2\x2\xB8\'\x3\x2\x2\x2\x10"+
		"+\x34\x39\x41QXhkwz\x8E\x9A\xAE\xB0";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Frukt
